/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CarpoolGroup } from "./CarpoolGroup";
import { CarpoolGroupCountArgs } from "./CarpoolGroupCountArgs";
import { CarpoolGroupFindManyArgs } from "./CarpoolGroupFindManyArgs";
import { CarpoolGroupFindUniqueArgs } from "./CarpoolGroupFindUniqueArgs";
import { CreateCarpoolGroupArgs } from "./CreateCarpoolGroupArgs";
import { UpdateCarpoolGroupArgs } from "./UpdateCarpoolGroupArgs";
import { DeleteCarpoolGroupArgs } from "./DeleteCarpoolGroupArgs";
import { Account } from "../../account/base/Account";
import { CarpoolGroupService } from "../carpoolGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CarpoolGroup)
export class CarpoolGroupResolverBase {
  constructor(
    protected readonly service: CarpoolGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CarpoolGroup",
    action: "read",
    possession: "any",
  })
  async _carpoolGroupsMeta(
    @graphql.Args() args: CarpoolGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CarpoolGroup])
  @nestAccessControl.UseRoles({
    resource: "CarpoolGroup",
    action: "read",
    possession: "any",
  })
  async carpoolGroups(
    @graphql.Args() args: CarpoolGroupFindManyArgs
  ): Promise<CarpoolGroup[]> {
    return this.service.carpoolGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CarpoolGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CarpoolGroup",
    action: "read",
    possession: "own",
  })
  async carpoolGroup(
    @graphql.Args() args: CarpoolGroupFindUniqueArgs
  ): Promise<CarpoolGroup | null> {
    const result = await this.service.carpoolGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarpoolGroup)
  @nestAccessControl.UseRoles({
    resource: "CarpoolGroup",
    action: "create",
    possession: "any",
  })
  async createCarpoolGroup(
    @graphql.Args() args: CreateCarpoolGroupArgs
  ): Promise<CarpoolGroup> {
    return await this.service.createCarpoolGroup({
      ...args,
      data: {
        ...args.data,

        account: args.data.account
          ? {
              connect: args.data.account,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CarpoolGroup)
  @nestAccessControl.UseRoles({
    resource: "CarpoolGroup",
    action: "update",
    possession: "any",
  })
  async updateCarpoolGroup(
    @graphql.Args() args: UpdateCarpoolGroupArgs
  ): Promise<CarpoolGroup | null> {
    try {
      return await this.service.updateCarpoolGroup({
        ...args,
        data: {
          ...args.data,

          account: args.data.account
            ? {
                connect: args.data.account,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarpoolGroup)
  @nestAccessControl.UseRoles({
    resource: "CarpoolGroup",
    action: "delete",
    possession: "any",
  })
  async deleteCarpoolGroup(
    @graphql.Args() args: DeleteCarpoolGroupArgs
  ): Promise<CarpoolGroup | null> {
    try {
      return await this.service.deleteCarpoolGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "account",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async getAccount(
    @graphql.Parent() parent: CarpoolGroup
  ): Promise<Account | null> {
    const result = await this.service.getAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
