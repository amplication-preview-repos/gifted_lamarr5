/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CarpoolGroup as PrismaCarpoolGroup,
  Account as PrismaAccount,
} from "@prisma/client";

export class CarpoolGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CarpoolGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.carpoolGroup.count(args);
  }

  async carpoolGroups(
    args: Prisma.CarpoolGroupFindManyArgs
  ): Promise<PrismaCarpoolGroup[]> {
    return this.prisma.carpoolGroup.findMany(args);
  }
  async carpoolGroup(
    args: Prisma.CarpoolGroupFindUniqueArgs
  ): Promise<PrismaCarpoolGroup | null> {
    return this.prisma.carpoolGroup.findUnique(args);
  }
  async createCarpoolGroup(
    args: Prisma.CarpoolGroupCreateArgs
  ): Promise<PrismaCarpoolGroup> {
    return this.prisma.carpoolGroup.create(args);
  }
  async updateCarpoolGroup(
    args: Prisma.CarpoolGroupUpdateArgs
  ): Promise<PrismaCarpoolGroup> {
    return this.prisma.carpoolGroup.update(args);
  }
  async deleteCarpoolGroup(
    args: Prisma.CarpoolGroupDeleteArgs
  ): Promise<PrismaCarpoolGroup> {
    return this.prisma.carpoolGroup.delete(args);
  }

  async getAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.carpoolGroup
      .findUnique({
        where: { id: parentId },
      })
      .account();
  }
}
